swap(a,b)
{
    aux=a;
    a=b;
    b=aux;
}
//Solovay-Strassen
gcd(a,b)
{
    if(b==0)
    return a;
    else
    return gcd(b%a,a);
}
jacobi( a , n )
//@requires n > 0 , n % 2 == 1
{
j = 1;
while ( a != 0 ) {
while ( a % 2 == 0 ) { // a i s eve n
a = a / 2;
if ( n%8 == 3 || n%8 == 5 ) 
j = 0 - j;
}
swap ( a , n );
if ( a % 4 == 3 && n % 4 == 3 ) 
j = 0 - j;
a = a % n;
}
if ( n == 1 ) 
return j;
else 
return 0;
}

isComp(n)
{
 uniform a in [2..n-1];
 if(gcd(a,n) !=1 ) 
 return "composite";
 x = jacobi(a,n);
 if(x<0) 
 x = x + n; 
 if(x!=power(a,(n-1)/2,n)) 
 return"composite";
 return"maybe prime";
}
n=13;
print(isComp(n));